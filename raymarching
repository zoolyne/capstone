Shader "Unlit/raymarch"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
#define MAX_STEPS 100
#define MAX_DIST 100
#define SURF_DIST 0.01
#define BOX_1 float3(1,1,1)

            struct appdata 
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
                float3 ro : TEXCOORD1;
                float3 hitPos : TEXCOORD2;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.ro = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1));
                o.hitPos = v.vertex;
                return o;
            }



            float sdSphere(float3 p) {
                float d = length(p) - 0.5;
                return d;
            }

            float sdBox(float3 p)
            {
                float3 q = abs(p) - BOX_1;
                return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
            }

            float sdInt(float distA, float distB)
            {
                return(max(distA, distB));
            }

            float scene(float3 p) {
                float sphereD = sdSphere(p);
                float boxD = sdBox(p);
                return sdInt(sphereD, boxD);
            }

            float RayMarch(float3 ro, float3 rd) {
                float dO = 0;
                float dS;
                for (int i = 0; i < MAX_STEPS; i++) {
                    float3 p = ro + dO * rd; 
                    dS = scene(p);
                    dO += dS;
                    if (dS<SURF_DIST || dO>MAX_DIST) break;
                }

                return dO;
            }

            float3 GetNormal(float3 p) {
                float2 e = float2(1e-2, 0);
                float3 n = scene(p) - float3(
                    scene(p - e.xyy),
                    scene(p - e.yxy),
                    scene(p - e.yyx)
                    );
                return normalize(n);

            }


            fixed4 frag(v2f i) : SV_Target
            {
                float2 uv = i.uv-0.5;
                //camera position
                float3 ro = i.ro;
                float3 rd = normalize(i.hitPos - ro);//float3(uv.x, uv.y, 1));
                
                float d = RayMarch(ro, rd);
                fixed4 col = 0;

                if (d < MAX_DIST) { 
                    float3 p = ro + rd * d;
                    float3 n = GetNormal(p);
                    col.rgb = float3(0.5,0.3,0.5);
                }

                return col;
            }
            ENDCG
        }
    }
}
